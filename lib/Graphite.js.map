{"version":3,"sources":["../src/Graphite.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqB,Q;;;;;;;;qBACnB,K,kBAAM,O,EAAS,Q,EAAU;AACvB,QAAM,QAAQ,KAAK,OAAL,CAAa,OAAb,CAAd;AACA,QAAM,QAAQ,EAAd;AACA,wBAAY,KAAZ,EAAmB,OAAnB,CAA2B,eAAO;AAChC,UAAM,QAAQ,MAAM,GAAN,EAAW,KAAzB;AACA,UAAM,YAAY,KAAK,KAAL,CAAW,CAAC,MAAM,GAAN,EAAW,SAAX,IAAwB,KAAK,GAAL,EAAzB,IAAuC,IAAlD,CAAlB;AACA,YAAM,IAAN,CAAW,CAAE,GAAF,EAAO,KAAP,EAAc,SAAd,EAA0B,IAA1B,CAA+B,GAA/B,CAAX;AACD,KAJD;AAKA,QAAI;AACF,WAAK,MAAL,CAAY,KAAZ,CAAkB,MAAM,IAAN,CAAW,IAAX,CAAlB;AACD,KAFD,CAEE,OAAO,GAAP,EAAY;AACZ,UAAI,QAAJ,EAAc;AACZ,iBAAS,GAAT;AACD,OAFD,MAEO;AACL,cAAM,GAAN;AACD;AACF;AACF,G;;;;;kBAlBkB,Q","file":"Graphite.js","sourcesContent":["import GraphiteClient from 'graphite-client';\n\nexport default class Graphite extends GraphiteClient {\n  write(metrics, callback) {\n    const flatt = this.flatten(metrics);\n    const lines = [];\n    Object.keys(flatt).forEach(key => {\n      const value = flatt[key].value;\n      const timestamp = Math.floor((flatt[key].timestamp || Date.now()) / 1000);\n      lines.push([ key, value, timestamp ].join(' '));\n    });\n    try {\n      this.socket.write(lines.join('\\n'));\n    } catch (err) {\n      if (callback) {\n        callback(err);\n      } else {\n        throw err;\n      }\n    }\n  }\n}\n"]}