{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAM,aAAa,SAAb,UAAa,CAAC,IAAD,EAAU;AAC3B,MAAI;AAAA;AACF,UAAM,YAAY,oBAAQ,QAAQ,IAAR,CAAR,CAAlB;AACA;AAAA,WAAO,oBAAY,SAAZ,EAAuB,MAAvB,CAA8B,UAAC,MAAD,EAAS,GAAT,EAAiB;AACpD,cAAI,IAAI,WAAJ,GAAkB,QAAlB,CAA2B,eAA3B,CAAJ,EAAiD;AAC/C,mBAAO,IAAP,GAAc,UAAU,GAAV,CAAd;AACD;AACD,cAAI,IAAI,WAAJ,GAAkB,QAAlB,CAA2B,eAA3B,CAAJ,EAAiD;AAC/C,mBAAO,IAAP,GAAc,UAAU,GAAV,CAAd;AACD;AACD,iBAAO,MAAP;AACD,SARM,EAQJ,EARI;AAAP;AAFE;;AAAA;AAWH,GAXD,CAWE,OAAO,KAAP,EAAc;AACd,WAAO,IAAP;AACD;AACF,CAfD;;AAiBA,IAAM,YAAY,SAAZ,SAAY,GAAM;AAAA,wBACiB,cAAI,UAAJ,CAAe,EAAf,CADjB;;AAAA,MACd,IADc,mBACd,IADc;AAAA,MACR,IADQ,mBACR,IADQ;AAAA,MACF,IADE,mBACF,IADE;AAAA,MACI,QADJ,mBACI,QADJ;;AAEtB,MAAM,SAAU,QAAQ,WAAW,IAAX,CAAT,IAA8B,EAA7C;AACA,kCAAS,UAAT,EAAe,UAAf,EAAqB,kBAArB,IAAkC,MAAlC;AACD,CAJD;;AAOA,IAAM,OAAO,SAAP,IAAO,GAAM;AACjB,eAAI,UAAJ;AACA,eAAI,aAAJ;AACD,CAHD;;AAKA,2DAAC;AAAA,MAOS,GAPT,EAQS,KART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAES,8BAAG,aAAI,OAAP,GAFT;;AAAA;AAAA;AAAA;AAAA,iBAGuB,8BAAG,aAAI,UAAP,GAHvB;;AAAA;AAAA;;AAAA,2BAGc,EAHd,gCAG6C,SAH7C;AAAA;AAAA;AAAA;;AAIK;AAJL,gBAKW,IAAI,KAAJ,CAAU,8CAAV,EAA0D,kBAAI,IAA9D,CALX;;AAAA;AAAA;AAAA,iBAOqB,8BAAG,aAAI,SAAP,EAAkB,IAAlB,cAPrB;;AAAA;AAOS,aAPT;AAQS,eART,GAQiB,kDAAkB,WAAlB,IAA+B,QAA/B,IARjB;;AASG,gBAAM,MAAN;AACA,kBAAQ,GAAR,CAAY,eAAZ,EAA6B,kBAAI,IAAjC,EAAuC,kBAAI,OAA3C;AAVH;AAAA;;AAAA;AAAA;AAAA;;AAYG,kBAAQ,KAAR,CAAc,YAAM,KAApB;AACA;;AAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD;;;;;AAoBA,QAAQ,EAAR,CAAW,QAAX,EAAqB,YAAM;AACzB;AACA,aAAW,YAAM;AACf,YAAQ,IAAR,CAAa,CAAb;AACD,GAFD,EAEG,GAFH;AAGD,CALD","file":"index.js","sourcesContent":["import pm2 from 'pm2';\nimport pmx from 'pmx';\nimport semver from 'semver';\nimport $p from 'babel-promisify';\nimport flatten from 'flat';\nimport pkg from '../package.json';\nimport Listener from './Listener';\n\nconst loadConfig = (path) => {\n  try {\n    const rawConfig = flatten(require(path));\n    return Object.keys(rawConfig).reduce((config, key) => {\n      if (key.toLowerCase().includes('graphite.host')) {\n        config.host = rawConfig[key];\n      }\n      if (key.toLowerCase().includes('graphite.port')) {\n        config.port = rawConfig[key];\n      }\n      return config;\n    }, {});\n  } catch (error) {\n    return null;\n  }\n};\n\nconst getClient = () => {\n  const { path, host, port, interval } = pmx.initModule({});\n  const config = (path && loadConfig(path)) || {};\n  return { host, port, interval, ...config };\n};\n\n\nconst exit = () => {\n  pm2.disconnect();\n  pm2.disconnectBus();\n};\n\n(async() => {\n  try {\n    await $p(pm2.connect)();\n    if (semver.lt(await $p(pm2.getVersion)(), '0.15.11')) {\n      exit();\n      throw new Error('This PM2 version is not compatible with %s!!', pkg.name);\n    }\n    const bus = await $p(pm2.launchBus).call(pm2);\n    const monyt = new Listener({ ...getClient(), bus });\n    monyt.listen();\n    console.log('[%s:%s] ready', pkg.name, pkg.version);\n  } catch (error) {\n    console.error(error.stack);\n    exit();\n  }\n})();\n\n/**\n * When PM2 try to kill app\n */\nprocess.on('SIGINT', () => {\n  exit();\n  setTimeout(() => {\n    process.exit(0);\n  }, 200);\n});\n"]}